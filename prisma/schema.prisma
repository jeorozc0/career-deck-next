generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model user {
  id          String           @id @db.Uuid // Let the trigger handle id generation
  email       String           @unique
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  onboarded   Boolean          @default(false)
  headline    String?
  summary     String?          @db.Text
  location    String?
  phone       String?
  skills      userskill[]
  experiences workexperience[]
  education   education[]
}

model skill {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String   @unique
  created_at DateTime @default(now())
}

model userskill {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  skill_id   String   @db.Uuid
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())

  @@unique([user_id, skill_id])
  @@index([user_id])
  @@index([skill_id])
}

model workexperience {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String    @db.Uuid
  title       String
  company     String
  start_date  DateTime
  end_date    DateTime?
  description String?   @db.Text
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        user      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model education {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @db.Uuid
  name       String
  type       String
  major      String
  start_date DateTime
  end_date   DateTime?
  gpa        String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  user       user      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}
